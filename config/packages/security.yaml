security:
  enable_authenticator_manager: true
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    App\Entity\Users:
      algorithm: auto

  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    # used to reload user from session & other features (e.g. switch_user)

    app_user_provider:
      entity:
        class: App\Entity\Users
        property: email
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false


    api_doc:
      pattern: ^/api/doc
      security: false
    register:
      pattern: ^/api/register
      stateless: true
    login:
      pattern: ^/api/login
      stateless: true
      json_login:
        username_path: email
        check_path: /api/login
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure
        require_previous_session: false
    api_token_refresh:
      pattern: ^/api/token/refresh
      stateless: true
      refresh_jwt:
        provider: app_user_provider
    #      refresh_jwt:
#        check_path: /api/token/refresh # or, you may use the `api_refresh_token` route name
    api:
      pattern:   ^/api
      stateless: true
      guard:
        authenticators:
          - lexik_jwt_authentication.jwt_token_authenticator
    main:
      lazy: true
      provider: app_user_provider
      custom_authenticator: App\Security\AppAuthenticator
      logout:
        path: api/logout
        # where to redirect after logout
        target: login

  access_control:
    - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api/token/refresh, roles: PUBLIC_ACCESS   }
    - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }